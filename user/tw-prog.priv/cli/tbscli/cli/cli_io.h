/****************************************************************************
 文件名  : CLI_Io.h
 作者    : liuzequn
 版本    :
 完成日期:
 文件描述:  本文件实现主机软件基本的输入输出，对外提供统一的接口；
            在实现上依赖终端数据，终端的输入输出功能。
 备注   :
 函数列表:
            (1);
            (2);
            (3);
            ......

提供给外部的接口:   本文件提供给外部的接口
            (2) IO_Print
            (6) IO_GetChar
            (7) IO_GetCharByPeek
            (8) IO_OutString
            (9) IO_GetConfirm
            (10)IO_GetString

需要外部提供的接口:    本文件需要外部提供的接口
            (1) CLI_SendToTerm
            (2) CLI_GetTermData
 修改历史:
        1. 修改者   :
           时间     :
           版本     :
           修改原因 :
        2. ...
 ****************************************************************************/
#ifndef _CLI_IO_H_
#define _CLI_IO_H_

#include "cli_private.h"

/* -------------------------------- 类型定义------------------------------ */


/* -------------------------------- 常量宏、枚举定义------------------------------ */

#define OUTBUFF_LENGTH      1024           /* 发送和接收缓冲区长度         */
#define OUTB_DIRRECLI_LENTGH  (4*OUTBUFF_LENGTH) /* 同步语种输出的最大长度 */
#define CUTSTRING_LENGTH    1000           /* 发送缓冲的实际长度*/
#define OUT_MAX_FORMAT_LEN  800            /* 对于变长参数的格式化输出，格式化串的最大允许长度 */

#define SYN_MAX_OUTPUT_LEN  0x100000       /*允许同步的最大输出长度 */

#define ASYN_DISPLAY_NUM      200          /* 异步显示的队列大小     */
#define ASYN_INFO_LENTGH     1000          /* 异步显示信息的最大长度 */

#define LINE_LENGTH            80
#define LINE_PER_PAGE          24

/* CTL + 字符键的定义           */
#define KEY_CTRL_C  3
#define KEY_CTRL_Z  26
#define KEY_CTRL_P  16
#define KEY_CTRL_O  15
#define KEY_MOVE_L  '<'
#define KEY_MOVE_R  '>'
#define KEY_MOVE_P  '{'
#define KEY_MOVE_N  '}'
#define KEY_CTRL_W  23
#define KEY_CTRL_S  19
#define KEY_CTRL_F  6
#define KEY_CTRL_B  2
#define KEY_CTRL_U  21
#define KEY_CTRL_K  11
#define KEY_CTRL_E  5
#define KEY_SPACE   0x20
#define KEY_ENTER   '\n'
#define KEY_RETURN  '\r'
#define KEY_TABLE   '\t'
#define KEY_ESC     0X1B
#define KEY_RE      0x1E //used to support '?' for telefonica 
#define KEY_US      0x1F //used to support ' ' for telefonica

/* 当前字符编辑状态的枚举定义   */
enum EditType
{
    COMMAND_INPUT,
    STRING_INPUT
};

/* -------------------------------- 结构、类描述定义 ------------------------------ */


/* -------------------------------- 对外接口函数外部引用 ------------------------------ */

#ifdef  __cplusplus
extern "C" {
#endif

/*-------------------------------------------------------------------*/
/* 函数名称 : IO_Print                                               */
/* 功    能 : 将格式化串输出到当前终端                               */
/* 输入参数 : ulInfoID 多语种资源ID                                  */
/* 输出参数 : 无                                                     */
/* 返回值   : 成功、失败                                             */
/* 调用说明 : 调用本函数需要确保ulInfoID在语种资源中已经有定义，且该 */
/*            资源字符串的最长不得超过2K                             */
/* 典型示例 : IO_Print(CLI_LOG_FAILED_TIME,3)                        */
/*            其中CLI_LOG_FAILED_TIME 对于中文语种信息为:            */
/*                            "\r\n  你已连续登录失败%d次! "         */
/*-------------------------------------------------------------------*/
ULONG   IO_Print(PCSTR szFormat, ...);

/*-------------------------------------------------------------------*/
/* 函数名称 : IO_OutString                                           */
/* 功    能 : 直接输出字符串到当前终端                               */
/* 输入参数 : szOutput 输出信息串                                    */
/* 输出参数 : 无                                                     */
/* 返回值   : 成功、失败                                             */
/* 调用说明 : 直接输出，该函数的调用者多为调试信息输出与特殊要求的   */
/*            输出,如果当前任务非终端任务,则输出到串口               */
/* 典型示例 : IO_OutString("\r\n  正确输出.")                        */
/*-------------------------------------------------------------------*/
ULONG   IO_OutString(const char  *szOutput);

/*********************************************************************/
/* 函数名称 : IO_OutToTerm()                                         */
/* 函数功能 : 组织输出字符串，并根据终端调用函数输出                 */
/* 输入参数 : pTermStruct   终端任务数据                             */
/*            szOutString  输出字符串                                */
/* 输出参数 : 无                                                     */
/* 返回     : 成功、失败                                             */
/* 上层函数 :                                                        */
/* 创建者   :                                                        */
/* 修改记录 :                                                        */
/*********************************************************************/
ULONG  IO_OutToTerm(const char  *szOutString);

/*-------------------------------------------------------------------*/
/* 函数名称 : IO_GetChar                                             */
/* 功    能 : 从终端接收一个字符                                     */
/* 输入参数 : 无                                                     */
/* 输出参数 : 无                                                     */
/* 返回值   : 接收到的字符                                           */
/* 调用说明 : 该函数调用导致任务阻塞，直到终端有输入或超时。注意该函 */
/*            数的调用需要判断返回值，如果返回NULL则可能是终端异常， */
/*            建议程序释放当前资源，不再继续处理当前事件             */
/* 典型示例 : cTmp = IO_GetChar();                                   */
/*-------------------------------------------------------------------*/
char  IO_GetChar(_VOID   );

/*-------------------------------------------------------------------*/
/* 函数名称 : IO_GetChar                                             */
/* 功    能 : 从终端接收缓冲读取一个字符                             */
/* 输入参数 : 无                                                     */
/* 输出参数 : 无                                                     */
/* 返回值   : 读取到的字符                                           */
/* 调用说明 : 该调用直接读取当前终端的接收缓冲，如果无内容则返回空   */
/* 典型示例 : cTmp = IO_GetCharByPeek();                             */
/*-------------------------------------------------------------------*/
char   IO_GetCharByPeek(_VOID   );

/*-------------------------------------------------------------------*/
/* 函数名称 : IO_GetString                                           */
/* 功    能 : 从当前终端接收一个字符串                               */
/* 输入参数 : ulSize  :字符串允许的最大长度                          */
/*            bInvisable  :输入模式:FALSE－字符回显，TRUE－星号回显  */
/* 输出参数 : szInput :接收的的输入字符串                            */
/* 返回值   : 成功、失败                                             */
/* 调用说明 : 该调用导致终端任务阻塞，直到超时或接收到回车键. 调用者 */
/*            应对返回值进行判断, 如果失败,则认为接收到的内容无效，  */
/*            导致这种情况的最大可能是终端异常，程序应当立即返回，让 */
/*            系统去识别并处理这种异常                               */
/* 典型示例 : if (IO_GetString(&szUsername,16,FALSE) != TBS_SUCCESS) */
/*                return TBS_FAILED;                                */
/*-------------------------------------------------------------------*/
ULONG   IO_GetString(char  *szInput, ULONG  ulSize, BOOL  bInvisable);

/*-------------------------------------------------------------------*/
/* 函数名称 : IO_GetConfirm                                          */
/* 功    能 : 等待用户输入确认信息                                   */
/* 输入参数 : ulInfoID       :语种ID                                 */
/*            ulDefaultChoice:缺省输入                               */
/* 输出参数 : 无                                                     */
/* 返回     : INPUT_NO/INPUT_YES/INPUT_TIMEOUT                       */
/* 调用说明 : 该调用导致终端任务阻塞，直到超时或接收到按键输入. 如果 */
/*            输入回车或三次均为'n'与'y'之外的内容, 返回缺省选项.    */
/*            超时时间统一定义为5秒                                  */
/* 典型示例 : if (IO_GetConfirm(CLI_KICK_OFF_ANTHOR, INPUT_NO)       */
/*                != INPUT_YES)                                      */
/*                ...... ;                                           */
/*-------------------------------------------------------------------*/
ULONG   IO_GetConfirm(PCSTR szFormat,  ULONG  ulDefaultChoice);

/*-------------------------------------------------------------------*/
/* 函数名称 : IO_SetScrollAuto                                       */
/* 功    能 : 设置当前终端为自动滚屏                                 */
/* 输入参数 : 无                                                     */
/* 输出参数 : 无                                                     */
/* 返回     : 成功、失败                                             */
/* 调用说明 :                                                        */
/*-------------------------------------------------------------------*/
ULONG  IO_SetScrollAuto(_VOID   );

/*-------------------------------------------------------------------*/
/* 函数名称 : IO_SetScrollBack                                       */
/* 功    能 : 恢复当前终端的滚屏方式                                 */
/* 输入参数 : 无                                                     */
/* 输出参数 : 无                                                     */
/* 返回     : 成功、失败                                             */
/* 调用说明 : 该接口须与IO_SetScrollAuto配套使用                     */
/*-------------------------------------------------------------------*/
ULONG  IO_SetScrollBack(_VOID   );

/*-------------------------------------------------------------------*/
/* 函数名称 : IO_IsOutputBroken                                      */
/* 功    能 : 判断当前的输出是否被中止                               */
/* 输入参数 : ulTermID: 终端ID                                       */
/* 输出参数 : 无                                                     */
/* 返回     : TRUE/FALSE                                             */
/* 调用说明 : 该接口一般用于有较多的输出过程中调用                   */
/*-------------------------------------------------------------------*/
BOOL IO_IsOutputBroken();



#ifdef  __cplusplus
}
#endif

#endif /*end of #ifndef _CLI_IO_H_*/

