##############################################################################
#
# INTEL CONFIDENTIAL
# Copyright (c) 2016 Intel Corporation All Rights Reserved
#
# The source code contained or described herein and all documents related
# to the source code ("Material") are owned by Intel Corporation or its
# suppliers or licensors. Title to the Material remains with Intel
# Corporation or its suppliers and licensors. The Material contains trade
# secrets and proprietary and confidential information of Intel or its
# suppliers and licensors. The Material is protected by worldwide copyright
# and trade secret laws and treaty provisions. No part of the Material may
# be used, copied, reproduced, modified, published, uploaded, posted,
# transmitted, distributed, or disclosed in any way without Intel's prior
# express written permission.
#
# No license under any patent, copyright, trade secret or other intellectual
# property right is granted to or conferred upon you by disclosure or
# delivery of the Materials, either expressly, by implication, inducement,
# estoppel or otherwise. Any license under such intellectual property rights
# must be express and approved by Intel in writing.
#
##############################################################################

##############################################################################
#
# Setup the environment required for SHGW to function for Lantiq platform
#
# Date			: 9/May/2016
#
#	Notes:
#		SHGW_ERROR_FILE has to be defined by the calling shell script
#
##############################################################################

. /etc/shgw/shgw.constants
. /etc/shgw/shgw.errno

#
# Retrieve the LAN IP with C-API
fn_get_lan_ips() {
        local _lan_interface0=`mngcli get ARC_LAN_0_Ifname`
        local _lan_interface1=`mngcli get ARC_LAN_1_Ifname`
        echo "`ifconfig $_lan_interface0`" | grep 'inet addr:' | cut -d: -f2 | awk '{ print $1}'
        echo "`ifconfig $_lan_interface1`" | grep 'inet addr:' | cut -d: -f2 | awk '{ print $1}'

}

insert_kernel_modules(){
	KERNEL_VERSION=$(uname -r)
	modules_dir="/lib/modules/${KERNEL_VERSION}/kernel/net/netfilter"
	modules_dir_ipset="${modules_dir}/ipset"
	
	if [ -e ${modules_dir}/nf_tproxy_core.ko ];then
        	insmod ${modules_dir}/nf_tproxy_core.ko;
   	else
        	${ECHO} "[$(fn_time_now)] ${modules_dir}/nf_tproxy_core.ko module doesn't exist " >> ${SHGW_STARTUP_STATUS}
        	fn_err_exit ${KERNEL_MODULE_INSERTION_FAILED}
    	fi

    	if [ -e ${modules_dir}/xt_TPROXY.ko ];then
        	insmod ${modules_dir}/xt_TPROXY.ko;
    	else
        	${ECHO} "[$(fn_time_now)] ${modules_dir}/xt_TPROXY.ko module doesn't exist " >> ${SHGW_STARTUP_STATUS}
        	fn_err_exit ${KERNEL_MODULE_INSERTION_FAILED}
    	fi

    	if [ -e ${modules_dir}/xt_socket.ko ];then
        	insmod ${modules_dir}/xt_socket.ko;
    	else
        	${ECHO} "[$(fn_time_now)] ${modules_dir}/xt_socket.ko module doesn't exist " >> ${SHGW_STARTUP_STATUS}
        	fn_err_exit ${KERNEL_MODULE_INSERTION_FAILED}
    	fi

    	if [ -e ${modules_dir}/xt_set.ko ];then
        	insmod ${modules_dir}/xt_set.ko;
    	else
        	${ECHO} "[$(fn_time_now)] ${modules_dir}/xt_set.ko module doesn't exist " >> ${SHGW_STARTUP_STATUS}
        	fn_err_exit ${KERNEL_MODULE_INSERTION_FAILED}
    	fi
	
	if [ -e ${modules_dir_ipset}/ip_set.ko ];then
		insmod ${modules_dir_ipset}/ip_set.ko;
	else
		${ECHO} "[$(fn_time_now)] ${modules_dir_ipset}/ip_set.ko module doesn't exist " >> ${SHGW_STARTUP_STATUS}
		fn_err_exit ${KERNEL_MODULE_INSERTION_FAILED}
	fi

	if [ -e ${modules_dir_ipset}/ip_set_list_set.ko ];then
		insmod ${modules_dir_ipset}/ip_set_list_set.ko;
	else
		${ECHO} "[$(fn_time_now)] ${modules_dir_ipset}/ip_set_list_set.ko doesn't exist " >> ${SHGW_STARTUP_STATUS}
		fn_err_exit ${KERNEL_MODULE_INSERTION_FAILED}
	fi

	if [ -e ${modules_dir_ipset}/ip_set_bitmap_ipmac.ko ];then
		insmod ${modules_dir_ipset}/ip_set_bitmap_ipmac.ko;
	else
		${ECHO} "[$(fn_time_now)] ${modules_dir_ipset}/ip_set_bitmap_ipmac.ko module doesn't exist " >> ${SHGW_STARTUP_STATUS}
		fn_err_exit ${KERNEL_MODULE_INSERTION_FAILED}
	fi

	if [ -e ${modules_dir_ipset}/ip_set_bitmap_port.ko ];then
		insmod ${modules_dir_ipset}/ip_set_bitmap_port.ko;
	else
		${ECHO} "[$(fn_time_now)] ${modules_dir_ipset}/ip_set_bitmap_port.ko module doesn't exist " >> ${SHGW_STARTUP_STATUS}
		fn_err_exit ${KERNEL_MODULE_INSERTION_FAILED}
	fi

	if [ -e ${modules_dir_ipset}/ip_set_hash_ip.ko ];then
		insmod ${modules_dir_ipset}/ip_set_hash_ip.ko;
	else
		${ECHO} "[$(fn_time_now)] ${modules_dir_ipset}/ip_set_hash_ip.ko module doesn't exist " >> ${SHGW_STARTUP_STATUS}
		fn_err_exit ${KERNEL_MODULE_INSERTION_FAILED}
	fi

	if [ -e ${modules_dir_ipset}/ip_set_hash_ipport.ko ];then
		insmod ${modules_dir_ipset}/ip_set_hash_ipport.ko;
	else
		${ECHO} "[$(fn_time_now)] ${modules_dir_ipset}/ip_set_hash_ipport.ko module doesn't exist " >> ${SHGW_STARTUP_STATUS}
		fn_err_exit ${KERNEL_MODULE_INSERTION_FAILED}
	fi

	if [ -e ${modules_dir_ipset}/ip_set_hash_ipportip.ko ];then
		insmod ${modules_dir_ipset}/ip_set_hash_ipportip.ko;
	else
		${ECHO} "[$(fn_time_now)] ${modules_dir_ipset}/ip_set_hash_ipportip.ko module doesn't exist " >> ${SHGW_STARTUP_STATUS}
		fn_err_exit ${KERNEL_MODULE_INSERTION_FAILED}
	fi

	if [ -e ${modules_dir_ipset}/ip_set_hash_net.ko ];then
		insmod ${modules_dir_ipset}/ip_set_hash_net.ko;
	else
		${ECHO} "[$(fn_time_now)] ${modules_dir_ipset}/ip_set_hash_net.ko module doesn't exist " >> ${SHGW_STARTUP_STATUS}
		fn_err_exit ${KERNEL_MODULE_INSERTION_FAILED}
	fi

	if [ -e ${modules_dir_ipset}/ip_set_hash_netiface.ko ];then
		insmod ${modules_dir_ipset}/ip_set_hash_netiface.ko;
	else
		${ECHO} "[$(fn_time_now)] ${modules_dir_ipset}/ip_set_hash_netiface.ko module doesn't exist " >> ${SHGW_STARTUP_STATUS}
		fn_err_exit ${KERNEL_MODULE_INSERTION_FAILED}
	fi

	if [ -e ${modules_dir_ipset}/ip_set_hash_netport.ko ];then
		insmod ${modules_dir_ipset}/ip_set_hash_netport.ko;
	else
		${ECHO} "[$(fn_time_now)] ${modules_dir_ipset}/ip_set_hash_netport.ko doesn't exist " >> ${SHGW_STARTUP_STATUS}
		fn_err_exit ${KERNEL_MODULE_INSERTION_FAILED}
	fi


}

insert_ip6table_mangle_ko(){
	KERNEL_VERSION=$(uname -r)
	modules_dir="/lib/modules/${KERNEL_VERSION}/kernel/net/ipv6"

	if [ -e ${modules_dir}/ip6table_mangle.ko ];then
		insmod ${modules_dir}/ip6table_mangle.ko;
	else
		${ECHO} "[$(fn_time_now)] ${modules_dir}/ip6table_mangle.ko doesn't exist " >> ${SHGW_STARTUP_STATUS}
		fn_err_exit ${KERNEL_MODULE_INSERTION_FAILED}
	fi
}

remove_conflicting_iptable_rules() {
	${ECHO} 0 > /proc/sys/net/bridge/bridge-nf-call-iptables
	${ECHO} 0 > /proc/sys/net/bridge/bridge-nf-call-ip6tables
}

#
# Retrieve gateway IP on a given interface
fn_get_gw_ip_on() {
	local _IFACE=${1}

	${ECHO} $(${IP} route list | ${GREP} "\<${_IFACE}\>" | ${GREP} default | ${AWK} '{print $3}')
}

#
#Get WAN IP with C-API
fn_get_wan_ip() {
        local _wan_interface=`mngcli get ARC_WAN_100_Ifname`
        echo "`ifconfig $_wan_interface`" | grep 'inet addr:' | cut -d: -f2 | awk '{ print $1}'

}
#
# Wait until the wan ip is up
fn_wait_for_wan_ip() {
	while [ -z $(fn_get_wan_ip) ]; do
		${SLEEP} ${WAIT_FOR_WAN_IP_SLEEP_TIME}
	done
}

#
# Retreive the WAN inteface
fn_get_wan_iface() {
	local _IP=$(fn_get_wan_ip)
	${ECHO} $(${IP} a | ${GREP} "\<${_IP}\>" | ${AWK} '{print $NF}')
}

#
#Enable Default Gateway if the gateway is not already up
fn_enable_default_gw() {
	local _temp_file="${TMPFS_PATH}/temp_file"

	$ECHO object:Device.IP.Interface.3.: :MODIFY > ${_temp_file}
	$ECHO param:X_LANTIQ_COM_DefaultGateway: :true >> ${_temp_file}

	${CALTEST} -s ${_temp_file}
	$RM ${_temp_file}

}

#
#Query Sqlite for a value and retry upto 5 times
fn_retry_query_upto_five_times() {
        local _cmd=$1
        local _db=$2
        local _ecode=$3
        local _sleep_time=$4
        QUERY_OUTPUT=""
        COUNT=1
        while [ $COUNT -lt $SQL_FAILURE_RETRY_COUNT ]; do
         QUERY_OUTPUT=$(${ECHO} ${_cmd} | ${SQLITE} ${_db})
                if [ $? -eq 0 ]; then
                        break
                fi
                sleep ${_sleep_time}
                COUNT=`expr $COUNT + 1`
        done
        if [ $COUNT -eq $SQL_FAILURE_RETRY_COUNT ]; then
                fn_err_exit $_ecode
        fi
}

#IPtables
#Run command until command fails
fn_run_until_failure() {
	while true; do
		$1 > /dev/null 2>&1
		if [ $? -ne 0 ]; then
			break
		fi
	done
}
